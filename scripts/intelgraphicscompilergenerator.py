#! /usr/bin/env python3
"""
* Copyright (c) 2019, Intel Corporation
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included
* in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
"""

import os
import os.path as path
import re
from androidbpgenerator import INDENT, CCDefaults, ModuleInfo, Generator, NOVERBOSE
from llvmgenerator import LLVMGenerator, UPDATE_STATIC

RUN_CALLABLE = True


class IntelGraphicsCompilerGenerator(Generator):
    def __init__(self, root):
        # It is necessary that patching on LLVM before generating Android.bp
        self.proj = path.join(root, "igc/")
        super(IntelGraphicsCompilerGenerator, self).__init__(self.proj, root)
        self.root = root
        # need to uncompress git.tar.gz firstly
        #os.chdir(path.join(root, "llvm_source/tools/clang/"))
        #os.system("tar zxvf git.tar.gz > /dev/null 2>&1")
        #os.chdir(path.join(root, "llvm_source/projects/llvm-spirv/"))
        #os.system("tar zxvf git.tar.gz > /dev/null 2>&1")
        # suffix 'Ocl' at end of every module in LLVM
        my_update_static = {"libBiFLibOcl" : "", "libCTHLibFcl" : "", }
        my_update_static.update(UPDATE_STATIC)
        # the reason why add or update some flags: https://wiki.ith.intel.com/display/GSE/Android+OpenCL+Driver+Porting+Problem+Fix
        # compile some source files which are generated by cmake into libigc.so
        self.allmoduleinfo[0] = ModuleInfo("libigc", "libigc.bp", "IGC/CMakeFiles/igc_dll.dir/", "library_shared",
            "intel-graphics-compiler-defaults", addsrc = ["device/bif/embedder/*.cpp"], updatestatic = my_update_static,
            updateflags = {"-Werror" : ""})
        # compile some source files which are generated by cmake into libigdfcl.so
        self.allmoduleinfo[1] = ModuleInfo("libigdfcl", "libigdfcl.bp", "IGC/CMakeFiles/fcl_dll.dir/", "library_shared",
            "intel-graphics-compiler-defaults", addsrc = ["device/fcl/embedder/*.cpp"], updatestatic = my_update_static,
            updateflags = {"-Werror" : ""})
        self.allmoduleinfo[2] = ModuleInfo("libCompiler", "libCompiler.bp", "IGC/Compiler/CMakeFiles/Compiler.dir/",
            "library_static", "intel-graphics-compiler-defaults", updateflags = {"-Werror" : ""})
        self.allmoduleinfo[3] = ModuleInfo("libSPIRV-Tools", "libSPIRV-Tools.bp",
            "IGC/AdaptorOCL/SPIRV/SPIRV-Tools/source/CMakeFiles/SPIRV-Tools.dir/", "library_static",
            "intel-graphics-compiler-defaults", updateflags = {"-Werror" : ""})
        self.allmoduleinfo[4] = ModuleInfo("libGenISAIntrinsics", "libGenISAIntrinsics.bp",
            "IGC/GenISAIntrinsics/CMakeFiles/GenISAIntrinsics.dir/", "library_static",
            "intel-graphics-compiler-defaults", updateflags = {"-Werror" : ""})
        # all make files which are generated by cmake are put in IGC, but both of visa and IGC are in the same project-directory: igc.
        self.allmoduleinfo[5] = ModuleInfo("igfxcmjit64", "igfxcmjit64.bp", "visa/CMakeFiles/GenX_IR.dir/",
            "library_static", "intel-graphics-compiler-defaults", middledir = "IGC/", updateflags = {"-Werror" : ""})
        self.allmoduleinfo[6] = ModuleInfo("libLocalScheduler", "libLocalScheduler.bp",
            "visa/LocalScheduler/CMakeFiles/LocalScheduler.dir/", "library_static", "intel-graphics-compiler-defaults",
            middledir = "IGC/", updateflags = {"-Werror" : ""})
        self.allmoduleinfo[7] = ModuleInfo("libiga_enc64", "libiga_enc64.bp",
            "visa/iga/IGALibrary/CMakeFiles/IGA_ENC_LIB.dir/", "library_static", "intel-graphics-compiler-defaults",
            # error: A target architecture must be defined. One of [TARGET_IA32 | TARGET_INTEL64].
            # error: expansion of date or time macro is not reproducible [-Werror,-Wdate-time]
            # return IGA_VERSION_STRING "-" IGA_EXTERNAL_INTERNAL " (" __DATE__ ")";
            middledir = "IGC/", updateflags = {"-Werror" : ""}, addflags = ["-DTARGET_INTEL64", "-Wno-date-time"])
        self.allmoduleinfo[8] = ModuleInfo("libiga_s64", "libiga_s64.bp",
            "visa/iga/IGALibrary/CMakeFiles/IGA_SLIB.dir/", "library_static", "intel-graphics-compiler-defaults",
            middledir = "IGC/", updateflags = {"-Werror" : ""}, addflags = ["-DTARGET_INTEL64", "-Wno-date-time"])

        self.allmoduledefaults = CCDefaults(self.proj, "intel-graphics-compiler-defaults",
            cppflags = ["-Wno-error"],
            clang_cflags = ["-Wno-error=non-virtual-dtor"],
            include_dirs = ["external/zlib",
                "hardware/intel/external/opencl/llvm_build/include",
                "hardware/intel/external/opencl/llvm_build/device/include",
                "hardware/intel/external/opencl/igc/device/include",
                "hardware/intel/external/opencl/igc/device/include/SPIRV-Tools",
                "hardware/intel/external/opencl/igc/IGC",
                "hardware/intel/external/opencl/igc/IGC/common",
                "hardware/intel/external/opencl/igc/IGC/WrapperLLVM/include",
                "hardware/intel/external/opencl/igc/IGC/AdaptorOCL",
                "hardware/intel/external/opencl/igc/IGC/AdaptorOCL/cif",
                "hardware/intel/external/opencl/igc/IGC/AdaptorOCL/SPIRV/SPIRV-Tools",
                "hardware/intel/external/opencl/igc/IGC/AdaptorOCL/SPIRV/SPIRV-Tools/include",
                "hardware/intel/external/opencl/igc/IGC/AdaptorOCL/SPIRV/SPIRV-Tools/external/SPIRV-Headers/include",
                "hardware/intel/external/opencl/igc/IGC/AdaptorOCL/ocl_igc_shared/executable_format",
                "hardware/intel/external/opencl/igc/skuwa",
                "hardware/intel/external/opencl/igc/visa",
                "hardware/intel/external/opencl/igc/visa/include",
                "hardware/intel/external/opencl/igc/visa/iga/GEDLibrary/GED_external/build/autogen-intel64",
                "hardware/intel/external/opencl/igc/visa/iga/GEDLibrary/GED_external/Source",
                "hardware/intel/external/opencl/igc/visa/iga/GEDLibrary/GED_external/Source/ged"],
            static_libs = ["libz"],
            bpfiles = ["libigc.bp", "libigdfcl.bp", "libCompiler.bp", "libSPIRV-Tools.bp", "libGenISAIntrinsics.bp",
                "igfxcmjit64.bp", "libLocalScheduler.bp", "libiga_enc64.bp", "libiga_s64.bp"], )

    def getTemplate(self):
        return "igc.tpl"

    def adjustSources(self, mode, all_sources):
        for i, l in enumerate(all_sources):
            all_sources[i] = INDENT * 2 + "\"" + re.sub(r".*?: " + self.allmoduleinfo[mode].Mid_Dir, "",
                re.sub("CMakeFiles/.*?\\.dir/", "", l.replace("__/", "../")))

        for i, s in enumerate(self.allmoduleinfo[mode].Add_Src):
            all_sources.append(INDENT * 2 + "\"" + s + "\",")

    def adjustLibrary(self, mode, all_libs, is_static = True):
        update_libs = self.allmoduleinfo[mode].Update_Static if is_static else self.allmoduleinfo[mode].Update_Shared

        for i, l in enumerate(update_libs):
            all_libs = re.sub(INDENT * 2 + "\"" + l + "\",\n",
                (INDENT * 2 + "\"" + update_libs[l] + "\",\n") if 0 < len(update_libs[l]) else "",
                    all_libs)

        return all_libs

    def adjustFlags(self, mode, all_flags, is_add = True):
        update_flags = self.allmoduleinfo[mode].Update_Flags
        add_flags = self.allmoduleinfo[mode].Add_Flags

        for i, f in enumerate(update_flags):
            all_flags = re.sub(INDENT * 2 + "\"" + f + "\",\n", update_flags[f], all_flags)

        if is_add:
            all_flags += "\n"
            
            for i, f in enumerate(add_flags): 
                all_flags += INDENT * 2 + "\"" + f + "\",\n"

        return all_flags

    def adjustFiles(self):
        print("It is adjusting some files for Intel-Graphics-Compiler ... ")
        build_dir = self.getBuildDir()
        cmd = "mkdir -p " + path.join(self.proj, "device/bif/embedder/") + NOVERBOSE
        cmd += "mkdir -p " + path.join(self.proj, "device/fcl/embedder/") + NOVERBOSE
        cmd += "mkdir -p " + path.join(self.proj, "device/include/SPIRV-Tools/") + NOVERBOSE
        cmd += "cp -f " + path.join(build_dir, "IGC/Release/bif/embedder/*.cpp") + " " + path.join(self.proj, "device/bif/embedder/") + NOVERBOSE
        cmd += "cp -f " + path.join(build_dir, "IGC/Release/fcl/embedder/*.cpp") + " " + path.join(self.proj, "device/fcl/embedder/") + NOVERBOSE
        cmd += "cp -f " + path.join(build_dir, "IGC/Release/IntrinsicGenISA.gen") + " " + path.join(self.proj, "device/include/") + NOVERBOSE
        cmd += "cp -f " + path.join(build_dir, "IGC/autogen/MDNodeFunctions.gen") + " " + path.join(self.proj, "device/include/") + NOVERBOSE
        cmd += "cp -f " + path.join(build_dir, "IGC/AdaptorOCL/SPIRV/SPIRV-Tools/*.inc") + " " + path.join(self.proj, "device/include/SPIRV-Tools/") + NOVERBOSE
        cmd += "cd " + self.root + \
            " && patch -p1 < igc/patches/0001-add-support-to-dlopen-on-Android.patch" + NOVERBOSE
        os.system(cmd)


class Main:

    def run(self):
        script = path.dirname(__file__)
        root = path.abspath(path.join(script, "../.."))

        print(("script = " + script))
        print(("root = " + root))

        IntelGraphicsCompilerGenerator(root).generate(to_make = True)
        # Generating for LLVM should be after IGC
        # True - need to cmake again 
        # False - don't cmake again, and use cmake with igc
        LLVMGenerator(root).generate(to_cmake = False)


if RUN_CALLABLE:
    m = Main()
    m.run()
